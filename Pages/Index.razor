@page "/"
@using TestingMudBlazor.CRUD.Data
@inject TestingMudBlazor.CRUD.Services.IItemService itemService
@inject MudBlazor.ISnackbar snackBar

<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Add / Edit Items</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudTextField @bind-Value="item.Name" Label="Name" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <MudTextField @bind-Value="item.Type" Label="Type" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <MudTextField @bind-Value="item.Damage" Label="Damage" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <MudTextField @bind-Value="item.Weight" Label="Weight" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <MudTextField @bind-Value="item.Durability" Label="Durability" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <MudTextField @bind-Value="item.Info" Label="Info" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <MudTextField @bind-Value="item.Price" Label="Price" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
        <br />
        <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="Save">Save Item</MudButton>
    </MudCardContent>
</MudCard>
<br />
<MudTable Elevation="25" Items="GetItems()" Filter="new Func<Item, bool>(Search)" @bind-customer="item">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Items</MudText>
        <MudToolBarSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search for Items..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Name</MudTh>
        <MudTh>Type</MudTh>
        <MudTh>Damage</MudTh>
        <MudTh>Weight</MudTh>
        <MudTh>Durability</MudTh>
        <MudTh>Info</MudTh>
        <MudTh>Price</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">@context.Name</MudTd>
        <MudTd DataLabel="Type">@context.Type</MudTd>
        <MudTd DataLabel="Damage">@context.Damage</MudTd>
        <MudTd DataLabel="Weight">@context.Weight</MudTd>
        <MudTd DataLabel="Durability">@context.Durability</MudTd>
        <MudTd DataLabel="Info">@context.Info</MudTd>
        <MudTd DataLabel="Price">@context.Price</MudTd>
        <MudTd DataLabel="">
            <MudFab @onclick="@(()=>Edit(@context.Id))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
            <MudFab @onclick="@(()=>Delete(@context.Id))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
    </RowTemplate>
</MudTable>
@code{
    private string searchString = ""; //We declare a new customer object and list of customers.
    private Item item = new Item();
    private List<Item> items = new List<Item>();
    protected override async Task OnInitializedAsync() //As soon as the page is loaded, the OnInitializedAsync method is invoked by default. We override this method and load the list of customers from our service instance.
    {
        GetItems();
    }
    private List<Item> GetItems()
    {
        items = itemService.GetItems();
        return items;
    }
    private bool Search(Item item) //This basically checks if any of the searched keywords is contained in either the name, type of any item.
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (item.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || item.Type.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            || item.Info.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }
    private void Save()
    {
        itemService.SaveItem(item);
        item = new Item();
        snackBar.Add("Item Saved.", Severity.Success); //we used the snack bar service to display a "item saved" notification to the user.
        GetItems();
    }
    private void Edit(int id) //Retrieve the item record when the user clicks the edit button corresponding to a item in the data grid
    {
        item = items.FirstOrDefault(c => c.Id == id);
    }
    private void Delete(int id)
    {
        itemService.DeleteItem(id);
        snackBar.Add("Item Deleted.", Severity.Success);
        GetItems();
    }
}